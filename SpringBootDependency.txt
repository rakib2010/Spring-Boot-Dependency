=====  application.properties  ==============

server.port=8081

spring.mvc.view.prefix=/WEB-INF/view/
spring.mvc.view.suffix=.jsp

#database connection
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/eve47spring
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver

=========== Create Table automatically ==========
@Entity
@Table(name = "tableName")
public class Model{
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)

}





=========== Add Dependency on POM.xml ===========

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>



		


		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>






@Controller
public class StudentController {
	
	@Autowired
	StudentRepository studentRepository;
	
	@GetMapping("/")
	public ModelAndView index() {
		return new ModelAndView("create_page");
	}
	
	
	@PostMapping("/save")
	public ModelAndView saveData(@ModelAttribute StudentModel studentModel) {
		studentRepository.save(studentModel);
		return new ModelAndView("create_page");
		
	}
	
	@GetMapping("/show")
	public ModelAndView showData() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StudentModel> st =(List<StudentModel>) studentRepository.findAll();
		map.put("st", st);
		return new ModelAndView("show_page","data",map);
		
	}
	
	@GetMapping("/edit/{id}")
	public ModelAndView editData(@PathVariable(value = "id") long id, ModelMap map) {
		StudentModel student = studentRepository.findById(id).get();
		map.put("student", student);
		return new ModelAndView("edit_page",map);
		
		
	}
	

	
	@GetMapping("/delete/{id}")
	public ModelAndView deleteData(@PathVariable(value = "id") long id) {
		studentRepository.deleteById(id);
		return new ModelAndView("redirect:/show");
		
		
	}
	
	

}








@Controller
public class HomeController {
	
	@Autowired
	private ProductRepository productRepository;
	
	@GetMapping("/")
	public ModelAndView index() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<ProductModel> productList = (List<ProductModel>) productRepository.findAll();
		map.put("productList", productList);
		return new ModelAndView("index", "data", map);
	}
	
	
	
	@GetMapping("/product_create")
	public ModelAndView create() {
		Map<String, Object> map = new HashMap<String, Object>();
		return new ModelAndView("create_product", "data", map);
	}
	
	@PostMapping("/product_save")
	public ModelAndView save(@ModelAttribute ProductModel productModel, HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			productModel = productRepository.save(productModel);
			map.put("product", productModel);
			map.put("status", "Success");
			map.put("message", "Data saved successfully");
		} catch (Exception e) {
			map.put("status", "Failed");
			map.put("message", e.getLocalizedMessage());
		}
		return new ModelAndView("create_product", "data", map);
	}
	
	
	@GetMapping("/product_edit/{id}")
	public ModelAndView Edit(@PathVariable(value = "id") long id) {
		Map<String, Object> map = new HashMap<String, Object>();
		ProductModel product =  productRepository.findById(id).get();
		map.put("product", product);
		return new ModelAndView("edit_product", "data", map);
	}
	
	
	
	@PostMapping("/product_update")
	public ModelAndView update(@ModelAttribute ProductModel productModel, HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			productModel = productRepository.save(productModel);
			map.put("product", productModel);
			map.put("status", "Success");
			map.put("message", "Data updated successfully");
		} catch (Exception e) {
			map.put("status", "Failed");
			map.put("message", e.getLocalizedMessage());
		}
		return new ModelAndView("edit_product", "data", map);
	}

	@GetMapping("/product_delete/{id}")
	public ModelAndView delete(@PathVariable(value = "id") long id) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			ProductModel product =  productRepository.findById(id).get();
			productRepository.delete(product);
			map.put("message", "Delete successful");
			
		} catch (Exception e) {
			
		}
		return new ModelAndView("redirect:/");
	}
}
